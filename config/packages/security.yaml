security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: licenceNumber
    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_FRAME, ROLE_REGISTER, ROLE_ADMIN]
        ROLE_ADMIN: [ROLE_USER, ROLE_FRAME, ROLE_REGISTER, ROLE_ALLOWED_TO_SWITCH]
        ROLE_REGISTER : [ROLE_USER, ROLE_FRAME]
        ROLE_FRAME: [ROLE_USER]
        ROLE_USER:

    access_decision_manager:
        strategy: unanimous
        allow_if_all_abstain: false
    
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticators:
                - App\Security\LoginAuthenticator
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout

            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds
            switch_user: 
                provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/groupe, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin/seance, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin/calendrier, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin/sortie, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin/adherent, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin/rando, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin/group, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin/inscription, roles: ROLE_REGISTER, requires_channel: https }
        - { path: ^/admin/identite, roles: ROLE_REGISTER, requires_channel: https }
        - { path: ^/admin/send, roles: ROLE_REGISTER, requires_channel: https }
        - { path: ^/admin/sante, roles: ROLE_REGISTER, requires_channel: https }
        - { path: ^/admin/assurance, roles: ROLE_REGISTER, requires_channel: https }
        - { path: ^/admin/adh√©rent/choices, roles: ROLE_FRAME, requires_channel: https }
        - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: https }
        - { path: ^/vote, roles: ROLE_USER, requires_channel: https }
        - { path: ^/mon-compte, roles: ROLE_USER, requires_channel: https }
        - { path: ^/mes-commandes, roles: ROLE_USER, requires_channel: https }
        - { path: ^/ma-commande, roles: ROLE_USER, requires_channel: https }
        - { path: ^/mon-panier, roles: ROLE_USER, requires_channel: https }
        - { path: ^/mon-programme, roles: ROLE_USER, requires_channel: https }
        - { path: '^/js', roles: PUBLIC_ACCESS, requires_channel: https }
        - { path: '^/', roles: PUBLIC_ACCESS, requires_channel: https }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
